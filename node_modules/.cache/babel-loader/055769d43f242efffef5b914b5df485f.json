{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/johaniedamas/weather-react/src/Forecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport ForecastPreview from \"./ForecastPreview\";\nimport \"./Forecast.css\";\nexport default function Forecast(props) {\n  _s();\n\n  const [finishLoaded, setFinishLoaded] = useState(false);\n  const [weatherForecast, setWeatherForecast] = useState(null);\n\n  function handleForecastResponse(response) {\n    setFinishLoaded(true);\n    setWeatherForecast(response.data);\n  }\n\n  if (finishLoaded && props.city === weatherForecast.city.name) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Forecast row\",\n      children: [/*#__PURE__*/_jsxDEV(ForecastPreview, {\n        data: weatherForecast.list[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ForecastPreview, {\n        data: weatherForecast.list[1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ForecastPreview, {\n        data: weatherForecast.list[2]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ForecastPreview, {\n        data: weatherForecast.list[3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ForecastPreview, {\n        data: weatherForecast.list[4]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ForecastPreview, {\n        data: weatherForecast.list[5]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this);\n  } else {\n    const apiKey = \"19f46cb6a372e938ec33a12b4f819dec\";\n    let url = `https://api.openweathermap.org/data/2.5/forecast?q=${props.city}&appid=${apiKey}&units=metric`;\n    axios.get(url).then(handleForecastResponse);\n    return null;\n  }\n}\n\n_s(Forecast, \"xpO3jk0jBcQTfroGuRNiFcq5Uj4=\");\n\n_c = Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/johaniedamas/weather-react/src/Forecast.js"],"names":["React","useState","axios","ForecastPreview","Forecast","props","finishLoaded","setFinishLoaded","weatherForecast","setWeatherForecast","handleForecastResponse","response","data","city","name","list","apiKey","url","get","then"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAO,gBAAP;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACpC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACO,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,CAAC,IAAD,CAAtD;;AAEA,WAASS,sBAAT,CAAgCC,QAAhC,EAA0C;AACtCJ,IAAAA,eAAe,CAAC,IAAD,CAAf;AACAE,IAAAA,kBAAkB,CAACE,QAAQ,CAACC,IAAV,CAAlB;AACH;;AAED,MAAIN,YAAY,IAAID,KAAK,CAACQ,IAAN,KAAeL,eAAe,CAACK,IAAhB,CAAqBC,IAAxD,EAA8D;AAC9D,wBACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACE,QAAC,eAAD;AAAiB,QAAA,IAAI,EAAEN,eAAe,CAACO,IAAhB,CAAqB,CAArB;AAAvB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,eAAD;AAAiB,QAAA,IAAI,EAAEP,eAAe,CAACO,IAAhB,CAAqB,CAArB;AAAvB;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,eAAD;AAAiB,QAAA,IAAI,EAAEP,eAAe,CAACO,IAAhB,CAAqB,CAArB;AAAvB;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE,QAAC,eAAD;AAAiB,QAAA,IAAI,EAAEP,eAAe,CAACO,IAAhB,CAAqB,CAArB;AAAvB;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE,QAAC,eAAD;AAAiB,QAAA,IAAI,EAAEP,eAAe,CAACO,IAAhB,CAAqB,CAArB;AAAvB;AAAA;AAAA;AAAA;AAAA,cALF,eAME,QAAC,eAAD;AAAiB,QAAA,IAAI,EAAEP,eAAe,CAACO,IAAhB,CAAqB,CAArB;AAAvB;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAUC,GAXD,MAWO;AACJ,UAAMC,MAAM,GAAG,kCAAf;AACA,QAAIC,GAAG,GAAI,sDAAqDZ,KAAK,CAACQ,IAAK,UAASG,MAAO,eAA3F;AACAd,IAAAA,KAAK,CAACgB,GAAN,CAAUD,GAAV,EAAeE,IAAf,CAAoBT,sBAApB;AACA,WAAO,IAAP;AACF;AACJ;;GA1BuBN,Q;;KAAAA,Q","sourcesContent":["import React, {useState} from \"react\";\nimport axios from \"axios\";\nimport ForecastPreview from \"./ForecastPreview\";\nimport \"./Forecast.css\";\n\nexport default function Forecast(props) {\n    const [finishLoaded, setFinishLoaded] = useState(false);\n    const [weatherForecast, setWeatherForecast] = useState(null);\n\n    function handleForecastResponse(response) {\n        setFinishLoaded(true);\n        setWeatherForecast(response.data);\n    }\n    \n    if (finishLoaded && props.city === weatherForecast.city.name) {\n    return (\n      <div className=\"Forecast row\">\n        <ForecastPreview data={weatherForecast.list[0]} />\n        <ForecastPreview data={weatherForecast.list[1]} />\n        <ForecastPreview data={weatherForecast.list[2]} />\n        <ForecastPreview data={weatherForecast.list[3]} />\n        <ForecastPreview data={weatherForecast.list[4]} />\n        <ForecastPreview data={weatherForecast.list[5]} />\n      </div>\n    );\n    } else {\n       const apiKey = \"19f46cb6a372e938ec33a12b4f819dec\";\n       let url = `https://api.openweathermap.org/data/2.5/forecast?q=${props.city}&appid=${apiKey}&units=metric`;\n       axios.get(url).then(handleForecastResponse);\n       return null;\n    }  \n}"]},"metadata":{},"sourceType":"module"}